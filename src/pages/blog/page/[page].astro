---
import type { GetStaticPathsResult, GetStaticPathsItem } from 'astro';
import type { ISbStoryData } from '@storyblok/astro';

import Overview from '../../../components/blog/Overview.astro';
import { getBlogPosts } from '../../../utils/storyblok';

interface Props {
  page: number,
  total: number,
  stories: ISbStoryData[],
}

export const prerender = true;

export async function getStaticPaths(): Promise<GetStaticPathsResult | Response> {
  const { data, total } = await getBlogPosts(1, 100, undefined, 'first_published_at:desc');

  const perPage = parseInt(String(import.meta.env.BLOG_ITEMS_PER_PAGE));
  const pagePath: GetStaticPathsItem[] = [];
  let pages: number = Math.ceil(total / perPage);
  if (pages <= 0) {
    pages = 2;
  }

  for (let i: number = 2; i <= pages; i++) {
    pagePath.push({
      params: { page: String(i), path: String(i) },
      props: {
        page: i,
        stories: data.stories.slice(
          parseInt(String(i * perPage)) - perPage,
          parseInt(String(i * perPage)),
        ),
        total: total,
      },
    });
  }

  return pagePath;
}
const { page, total, stories } = Astro.props;
---
<Overview page={page}
          total={Math.ceil(total / import.meta.env.BLOG_ITEMS_PER_PAGE)}
          stories={stories || []}
          url=`blog/page/${page}`
/>
