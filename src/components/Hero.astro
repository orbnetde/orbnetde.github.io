---
import { Picture } from 'astro:assets';

import orbnetDashboard from '../assets/hero/screen-dashboard.png';
import orbnetEvents from '../assets/hero/screen-events.png';
import orbnetAccounting from '../assets/hero/screen-buchhaltung.png';
---
<!-- ====== Hero Section Start -->
<section id="start" class="relative pb-12">
  <div class="w-full bg-gradient-to-t from-primary-900 from-10% to-80% bg-primary dark:from-dark dark:bg-dark-3">
    <div class="flex flex-wrap items-center text-center h-[100lvh] w-full">
      <div class="pt-[80px] px-6 lg:pt-0 w-full text-white">
        <h1 class="text-3xl lg:text-5xl lg:leading-tight font-semibold">
          WIR GEHEN ALL-IN
          <br>
          Softwarelösung für <span class="typewrite inline-block w-full md:w-auto md:inline h-4" data-period="2000" data-type='["Dienstleister", "Berater", "Coaches", "Ärzte", "Handwerker", "Salons"]'>Dienstleister</span>
        </h1>

        <h2 class="lg:text-xl py-6 lg:py-9">
          Schluss mit tausend Tool-Lösungen und Zeitfresser-Aufgaben. Alles, was du brauchst, findest du bei orbnet!
        </h2>

        <a
          href="https://my.orbnet.de/account/register/"
          class="w-full lg:w-2/5 tracking-wide text-lg font-semibold text-dark items-center bg-white hover:bg-white/[0.95] dark:bg-primary dark:text-white inline-flex justify-center px-7 py-6 lg:py-4 rounded-lg shadow-md text-center transition duration-500 hover:shadow-xl">
          Jetzt testen
        </a>
      </div>
    </div>
  </div>
  <div class="hidden md:block landscape:md:hidden container px-6 relative mb-[90px] md:mb-[190px] lg:mb-[290px]">
    <Picture
      loading="eager"
      src={orbnetDashboard}
      widths={[1000, 600, 300]}
      alt="orbnet dashboard"
      format="webp"
      class="rounded-2xl shadow-2xl absolute z-30 left-[50%] w-[300px] md:w-[600px] lg:w-[800px] xl:w-[1000px] -ml-[150px] md:-ml-[300px] lg:-ml-[400px] xl:-ml-[500px] -mt-[40px] md:-mt-[120px] md:landscape:-mt-[40px] md:portrait:-mt-[120px] lg:landscape:-mt-[200px] transition duration-500 hover:-translate-y-1.5"
    />
    <Picture
      loading="lazy"
      src={orbnetAccounting}
      widths={[800, 420, 209]}
      alt="orbnet dashboard"
      format="webp"
      class="rounded-2xl shadow-lg absolute z-20 left-0 w-[200px] md:w-[400px] lg:w-[600px} xl:w-[800px] -mt-[20px] md:-mt-[90px] md:portrait:-mt-[80px] md:landscape:-mt-[20px] lg:landscape:-mt-[130px] -rotate-6 transition duration-500 hover:-translate-y-1.5"
    />
    <Picture
      loading="lazy"
      src={orbnetEvents}
      widths={[800, 420, 209]}
      alt="orbnet dashboard"
      format="webp"
      class="rounded-2xl shadow-lg absolute z-10 right-0 w-[200px] md:w-[400px] lg:w-[600px} xl:w-[800px] -mt-[20px] md:-mt-[90px] md:portrait:-mt-[80px] md:landscape:-mt-[20px] lg:landscape:-mt-[130px] rotate-6 transition duration-500 hover:-translate-y-1.5"
    />
  </div>
</section>
<style>
    .typewrite {
        @apply text-warning;
    }
</style>
<script>
  class TxtType {
    private readonly toRotate: string[];
    private el: Element;
    private loopNum: number = 0;
    private readonly period: number;
    private txt: string = '';
    private isDeleting: boolean = false;

    constructor(el: Element, toRotate: string[], period: string) {
      this.toRotate = toRotate;
      this.el = el;
      this.period = parseInt(period, 10) || 2000;
      this.tick();
    }

    private tick = (): void => {
      let i = this.loopNum % this.toRotate.length;
      const fullTxt = this.toRotate[i];

      if (this.isDeleting) {
        this.txt = fullTxt.substring(0, this.txt.length - 1);
      } else {
        this.txt = fullTxt.substring(0, this.txt.length + 1);
      }

      this.el.innerHTML = '<span class="wrap">' + this.txt + '</span>';

      let delta = 200 - Math.random() * 100;

      if (this.isDeleting) {
        delta /= 2;
      }

      if (!this.isDeleting && this.txt === fullTxt) {
        delta = this.period;
        this.isDeleting = true;
      } else if (this.isDeleting && this.txt === '') {
        this.isDeleting = false;
        this.loopNum++;
        delta = 500;
      }

      setTimeout(this.tick, delta);
    };
  }

  window.addEventListener('DOMContentLoaded', () => {
    const elements = document.getElementsByClassName('typewrite');
    for (let i = 0; i < elements.length; i++) {
      const toRotate = elements[i].getAttribute('data-type') ?? "[]";
      const period = elements[i].getAttribute('data-period') ?? "2000";
      if (toRotate) {
        new TxtType(elements[i], JSON.parse(toRotate), period);
      }
    }
  });


</script>
<!-- ====== Hero Section End -->
